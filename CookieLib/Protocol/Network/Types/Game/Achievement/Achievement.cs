//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cookie.Protocol.Network.Types.Game.Achievement
{
    using System.Collections.Generic;
    using Cookie.Protocol.Network.Messages;
    using Cookie.Protocol.Network.Types;
    using Cookie.IO;
    
    
    public class Achievement : NetworkType
    {
        
        public const short ProtocolId = 363;
        
        public override short TypeID
        {
            get
            {
                return ProtocolId;
            }
        }
        
        private List<AchievementObjective> m_finishedObjective;
        
        public virtual List<AchievementObjective> FinishedObjective
        {
            get
            {
                return m_finishedObjective;
            }
            set
            {
                m_finishedObjective = value;
            }
        }
        
        private List<AchievementStartedObjective> m_startedObjectives;
        
        public virtual List<AchievementStartedObjective> StartedObjectives
        {
            get
            {
                return m_startedObjectives;
            }
            set
            {
                m_startedObjectives = value;
            }
        }
        
        private ushort m_ObjectId;
        
        public virtual ushort ObjectId
        {
            get
            {
                return m_ObjectId;
            }
            set
            {
                m_ObjectId = value;
            }
        }
        
        public Achievement(List<AchievementObjective> finishedObjective, List<AchievementStartedObjective> startedObjectives, ushort objectId)
        {
            m_finishedObjective = finishedObjective;
            m_startedObjectives = startedObjectives;
            m_ObjectId = objectId;
        }
        
        public Achievement()
        {
        }
        
        public override void Serialize(ICustomDataOutput writer)
        {
            writer.WriteShort(((short)(m_finishedObjective.Count)));
            int finishedObjectiveIndex;
            for (finishedObjectiveIndex = 0; (finishedObjectiveIndex < m_finishedObjective.Count); finishedObjectiveIndex = (finishedObjectiveIndex + 1))
            {
                AchievementObjective objectToSend = m_finishedObjective[finishedObjectiveIndex];
                objectToSend.Serialize(writer);
            }
            writer.WriteShort(((short)(m_startedObjectives.Count)));
            int startedObjectivesIndex;
            for (startedObjectivesIndex = 0; (startedObjectivesIndex < m_startedObjectives.Count); startedObjectivesIndex = (startedObjectivesIndex + 1))
            {
                AchievementStartedObjective objectToSend = m_startedObjectives[startedObjectivesIndex];
                objectToSend.Serialize(writer);
            }
            writer.WriteVarUhShort(m_ObjectId);
        }
        
        public override void Deserialize(ICustomDataInput reader)
        {
            int finishedObjectiveCount = reader.ReadUShort();
            int finishedObjectiveIndex;
            m_finishedObjective = new System.Collections.Generic.List<AchievementObjective>();
            for (finishedObjectiveIndex = 0; (finishedObjectiveIndex < finishedObjectiveCount); finishedObjectiveIndex = (finishedObjectiveIndex + 1))
            {
                AchievementObjective objectToAdd = new AchievementObjective();
                objectToAdd.Deserialize(reader);
                m_finishedObjective.Add(objectToAdd);
            }
            int startedObjectivesCount = reader.ReadUShort();
            int startedObjectivesIndex;
            m_startedObjectives = new System.Collections.Generic.List<AchievementStartedObjective>();
            for (startedObjectivesIndex = 0; (startedObjectivesIndex < startedObjectivesCount); startedObjectivesIndex = (startedObjectivesIndex + 1))
            {
                AchievementStartedObjective objectToAdd = new AchievementStartedObjective();
                objectToAdd.Deserialize(reader);
                m_startedObjectives.Add(objectToAdd);
            }
            m_ObjectId = reader.ReadVarUhShort();
        }
    }
}
