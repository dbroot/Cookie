//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cookie.Protocol.Network.Types.Game.Inventory.Preset
{
    using System.Collections.Generic;
    using Cookie.Protocol.Network.Messages;
    using Cookie.Protocol.Network.Types;
    using Cookie.IO;
    
    
    public class IdolsPreset : NetworkType
    {
        
        public const short ProtocolId = 491;
        
        public override short TypeID
        {
            get
            {
                return ProtocolId;
            }
        }
        
        private List<System.UInt16> m_idolId;
        
        public virtual List<System.UInt16> IdolId
        {
            get
            {
                return m_idolId;
            }
            set
            {
                m_idolId = value;
            }
        }
        
        private byte m_presetId;
        
        public virtual byte PresetId
        {
            get
            {
                return m_presetId;
            }
            set
            {
                m_presetId = value;
            }
        }
        
        private byte m_symbolId;
        
        public virtual byte SymbolId
        {
            get
            {
                return m_symbolId;
            }
            set
            {
                m_symbolId = value;
            }
        }
        
        public IdolsPreset(List<System.UInt16> idolId, byte presetId, byte symbolId)
        {
            m_idolId = idolId;
            m_presetId = presetId;
            m_symbolId = symbolId;
        }
        
        public IdolsPreset()
        {
        }
        
        public override void Serialize(ICustomDataOutput writer)
        {
            writer.WriteByte(m_presetId);
            writer.WriteByte(m_symbolId);
            writer.WriteShort(((short)(m_idolId.Count)));
            int idolIdIndex;
            for (idolIdIndex = 0; (idolIdIndex < m_idolId.Count); idolIdIndex = (idolIdIndex + 1))
            {
                writer.WriteVarUhShort(m_idolId[idolIdIndex]);
            }
        }
        
        public override void Deserialize(ICustomDataInput reader)
        {
            m_presetId = reader.ReadByte();
            m_symbolId = reader.ReadByte();
            int idolIdCount = reader.ReadUShort();
            int idolIdIndex;
            m_idolId = new System.Collections.Generic.List<ushort>();
            for (idolIdIndex = 0; (idolIdIndex < idolIdCount); idolIdIndex = (idolIdIndex + 1))
            {
                m_idolId.Add(reader.ReadVarUhShort());
            } 
        }
    }
}
