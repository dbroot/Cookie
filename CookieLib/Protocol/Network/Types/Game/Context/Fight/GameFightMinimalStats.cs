//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cookie.Protocol.Network.Types.Game.Context.Fight
{
    using System.Collections.Generic;
    using Cookie.Protocol.Network.Messages;
    using Cookie.Protocol.Network.Types;
    using Cookie.IO;
    
    
    public class GameFightMinimalStats : NetworkType
    {
        
        public const short ProtocolId = 31;
        
        public override short TypeID
        {
            get
            {
                return ProtocolId;
            }
        }
        
        private uint m_lifePoints;
        
        public virtual uint LifePoints
        {
            get
            {
                return m_lifePoints;
            }
            set
            {
                m_lifePoints = value;
            }
        }
        
        private uint m_maxLifePoints;
        
        public virtual uint MaxLifePoints
        {
            get
            {
                return m_maxLifePoints;
            }
            set
            {
                m_maxLifePoints = value;
            }
        }
        
        private uint m_baseMaxLifePoints;
        
        public virtual uint BaseMaxLifePoints
        {
            get
            {
                return m_baseMaxLifePoints;
            }
            set
            {
                m_baseMaxLifePoints = value;
            }
        }
        
        private uint m_permanentDamagePercent;
        
        public virtual uint PermanentDamagePercent
        {
            get
            {
                return m_permanentDamagePercent;
            }
            set
            {
                m_permanentDamagePercent = value;
            }
        }
        
        private uint m_shieldPoints;
        
        public virtual uint ShieldPoints
        {
            get
            {
                return m_shieldPoints;
            }
            set
            {
                m_shieldPoints = value;
            }
        }
        
        private short m_actionPoints;
        
        public virtual short ActionPoints
        {
            get
            {
                return m_actionPoints;
            }
            set
            {
                m_actionPoints = value;
            }
        }
        
        private short m_maxActionPoints;
        
        public virtual short MaxActionPoints
        {
            get
            {
                return m_maxActionPoints;
            }
            set
            {
                m_maxActionPoints = value;
            }
        }
        
        private short m_movementPoints;
        
        public virtual short MovementPoints
        {
            get
            {
                return m_movementPoints;
            }
            set
            {
                m_movementPoints = value;
            }
        }
        
        private short m_maxMovementPoints;
        
        public virtual short MaxMovementPoints
        {
            get
            {
                return m_maxMovementPoints;
            }
            set
            {
                m_maxMovementPoints = value;
            }
        }
        
        private double m_summoner;
        
        public virtual double Summoner
        {
            get
            {
                return m_summoner;
            }
            set
            {
                m_summoner = value;
            }
        }
        
        private bool m_summoned;
        
        public virtual bool Summoned
        {
            get
            {
                return m_summoned;
            }
            set
            {
                m_summoned = value;
            }
        }
        
        private short m_neutralElementResistPercent;
        
        public virtual short NeutralElementResistPercent
        {
            get
            {
                return m_neutralElementResistPercent;
            }
            set
            {
                m_neutralElementResistPercent = value;
            }
        }
        
        private short m_earthElementResistPercent;
        
        public virtual short EarthElementResistPercent
        {
            get
            {
                return m_earthElementResistPercent;
            }
            set
            {
                m_earthElementResistPercent = value;
            }
        }
        
        private short m_waterElementResistPercent;
        
        public virtual short WaterElementResistPercent
        {
            get
            {
                return m_waterElementResistPercent;
            }
            set
            {
                m_waterElementResistPercent = value;
            }
        }
        
        private short m_airElementResistPercent;
        
        public virtual short AirElementResistPercent
        {
            get
            {
                return m_airElementResistPercent;
            }
            set
            {
                m_airElementResistPercent = value;
            }
        }
        
        private short m_fireElementResistPercent;
        
        public virtual short FireElementResistPercent
        {
            get
            {
                return m_fireElementResistPercent;
            }
            set
            {
                m_fireElementResistPercent = value;
            }
        }
        
        private short m_neutralElementReduction;
        
        public virtual short NeutralElementReduction
        {
            get
            {
                return m_neutralElementReduction;
            }
            set
            {
                m_neutralElementReduction = value;
            }
        }
        
        private short m_earthElementReduction;
        
        public virtual short EarthElementReduction
        {
            get
            {
                return m_earthElementReduction;
            }
            set
            {
                m_earthElementReduction = value;
            }
        }
        
        private short m_waterElementReduction;
        
        public virtual short WaterElementReduction
        {
            get
            {
                return m_waterElementReduction;
            }
            set
            {
                m_waterElementReduction = value;
            }
        }
        
        private short m_airElementReduction;
        
        public virtual short AirElementReduction
        {
            get
            {
                return m_airElementReduction;
            }
            set
            {
                m_airElementReduction = value;
            }
        }
        
        private short m_fireElementReduction;
        
        public virtual short FireElementReduction
        {
            get
            {
                return m_fireElementReduction;
            }
            set
            {
                m_fireElementReduction = value;
            }
        }
        
        private short m_criticalDamageFixedResist;
        
        public virtual short CriticalDamageFixedResist
        {
            get
            {
                return m_criticalDamageFixedResist;
            }
            set
            {
                m_criticalDamageFixedResist = value;
            }
        }
        
        private short m_pushDamageFixedResist;
        
        public virtual short PushDamageFixedResist
        {
            get
            {
                return m_pushDamageFixedResist;
            }
            set
            {
                m_pushDamageFixedResist = value;
            }
        }
        
        private short m_pvpNeutralElementResistPercent;
        
        public virtual short PvpNeutralElementResistPercent
        {
            get
            {
                return m_pvpNeutralElementResistPercent;
            }
            set
            {
                m_pvpNeutralElementResistPercent = value;
            }
        }
        
        private short m_pvpEarthElementResistPercent;
        
        public virtual short PvpEarthElementResistPercent
        {
            get
            {
                return m_pvpEarthElementResistPercent;
            }
            set
            {
                m_pvpEarthElementResistPercent = value;
            }
        }
        
        private short m_pvpWaterElementResistPercent;
        
        public virtual short PvpWaterElementResistPercent
        {
            get
            {
                return m_pvpWaterElementResistPercent;
            }
            set
            {
                m_pvpWaterElementResistPercent = value;
            }
        }
        
        private short m_pvpAirElementResistPercent;
        
        public virtual short PvpAirElementResistPercent
        {
            get
            {
                return m_pvpAirElementResistPercent;
            }
            set
            {
                m_pvpAirElementResistPercent = value;
            }
        }
        
        private short m_pvpFireElementResistPercent;
        
        public virtual short PvpFireElementResistPercent
        {
            get
            {
                return m_pvpFireElementResistPercent;
            }
            set
            {
                m_pvpFireElementResistPercent = value;
            }
        }
        
        private short m_pvpNeutralElementReduction;
        
        public virtual short PvpNeutralElementReduction
        {
            get
            {
                return m_pvpNeutralElementReduction;
            }
            set
            {
                m_pvpNeutralElementReduction = value;
            }
        }
        
        private short m_pvpEarthElementReduction;
        
        public virtual short PvpEarthElementReduction
        {
            get
            {
                return m_pvpEarthElementReduction;
            }
            set
            {
                m_pvpEarthElementReduction = value;
            }
        }
        
        private short m_pvpWaterElementReduction;
        
        public virtual short PvpWaterElementReduction
        {
            get
            {
                return m_pvpWaterElementReduction;
            }
            set
            {
                m_pvpWaterElementReduction = value;
            }
        }
        
        private short m_pvpAirElementReduction;
        
        public virtual short PvpAirElementReduction
        {
            get
            {
                return m_pvpAirElementReduction;
            }
            set
            {
                m_pvpAirElementReduction = value;
            }
        }
        
        private short m_pvpFireElementReduction;
        
        public virtual short PvpFireElementReduction
        {
            get
            {
                return m_pvpFireElementReduction;
            }
            set
            {
                m_pvpFireElementReduction = value;
            }
        }
        
        private ushort m_dodgePALostProbability;
        
        public virtual ushort DodgePALostProbability
        {
            get
            {
                return m_dodgePALostProbability;
            }
            set
            {
                m_dodgePALostProbability = value;
            }
        }
        
        private ushort m_dodgePMLostProbability;
        
        public virtual ushort DodgePMLostProbability
        {
            get
            {
                return m_dodgePMLostProbability;
            }
            set
            {
                m_dodgePMLostProbability = value;
            }
        }
        
        private short m_tackleBlock;
        
        public virtual short TackleBlock
        {
            get
            {
                return m_tackleBlock;
            }
            set
            {
                m_tackleBlock = value;
            }
        }
        
        private short m_tackleEvade;
        
        public virtual short TackleEvade
        {
            get
            {
                return m_tackleEvade;
            }
            set
            {
                m_tackleEvade = value;
            }
        }
        
        private short m_fixedDamageReflection;
        
        public virtual short FixedDamageReflection
        {
            get
            {
                return m_fixedDamageReflection;
            }
            set
            {
                m_fixedDamageReflection = value;
            }
        }
        
        private byte m_invisibilityState;
        
        public virtual byte InvisibilityState
        {
            get
            {
                return m_invisibilityState;
            }
            set
            {
                m_invisibilityState = value;
            }
        }
        
        private ushort m_meleeDamageReceivedPercent;
        
        public virtual ushort MeleeDamageReceivedPercent
        {
            get
            {
                return m_meleeDamageReceivedPercent;
            }
            set
            {
                m_meleeDamageReceivedPercent = value;
            }
        }
        
        private ushort m_rangedDamageReceivedPercent;
        
        public virtual ushort RangedDamageReceivedPercent
        {
            get
            {
                return m_rangedDamageReceivedPercent;
            }
            set
            {
                m_rangedDamageReceivedPercent = value;
            }
        }
        
        private ushort m_weaponDamageReceivedPercent;
        
        public virtual ushort WeaponDamageReceivedPercent
        {
            get
            {
                return m_weaponDamageReceivedPercent;
            }
            set
            {
                m_weaponDamageReceivedPercent = value;
            }
        }
        
        private ushort m_spellDamageReceivedPercent;
        
        public virtual ushort SpellDamageReceivedPercent
        {
            get
            {
                return m_spellDamageReceivedPercent;
            }
            set
            {
                m_spellDamageReceivedPercent = value;
            }
        }
        
        public GameFightMinimalStats(
                    uint lifePoints, 
                    uint maxLifePoints, 
                    uint baseMaxLifePoints, 
                    uint permanentDamagePercent, 
                    uint shieldPoints, 
                    short actionPoints, 
                    short maxActionPoints, 
                    short movementPoints, 
                    short maxMovementPoints, 
                    double summoner, 
                    bool summoned, 
                    short neutralElementResistPercent, 
                    short earthElementResistPercent, 
                    short waterElementResistPercent, 
                    short airElementResistPercent, 
                    short fireElementResistPercent, 
                    short neutralElementReduction, 
                    short earthElementReduction, 
                    short waterElementReduction, 
                    short airElementReduction, 
                    short fireElementReduction, 
                    short criticalDamageFixedResist, 
                    short pushDamageFixedResist, 
                    short pvpNeutralElementResistPercent, 
                    short pvpEarthElementResistPercent, 
                    short pvpWaterElementResistPercent, 
                    short pvpAirElementResistPercent, 
                    short pvpFireElementResistPercent, 
                    short pvpNeutralElementReduction, 
                    short pvpEarthElementReduction, 
                    short pvpWaterElementReduction, 
                    short pvpAirElementReduction, 
                    short pvpFireElementReduction, 
                    ushort dodgePALostProbability, 
                    ushort dodgePMLostProbability, 
                    short tackleBlock, 
                    short tackleEvade, 
                    short fixedDamageReflection, 
                    byte invisibilityState, 
                    ushort meleeDamageReceivedPercent, 
                    ushort rangedDamageReceivedPercent, 
                    ushort weaponDamageReceivedPercent, 
                    ushort spellDamageReceivedPercent)
        {
            m_lifePoints = lifePoints;
            m_maxLifePoints = maxLifePoints;
            m_baseMaxLifePoints = baseMaxLifePoints;
            m_permanentDamagePercent = permanentDamagePercent;
            m_shieldPoints = shieldPoints;
            m_actionPoints = actionPoints;
            m_maxActionPoints = maxActionPoints;
            m_movementPoints = movementPoints;
            m_maxMovementPoints = maxMovementPoints;
            m_summoner = summoner;
            m_summoned = summoned;
            m_neutralElementResistPercent = neutralElementResistPercent;
            m_earthElementResistPercent = earthElementResistPercent;
            m_waterElementResistPercent = waterElementResistPercent;
            m_airElementResistPercent = airElementResistPercent;
            m_fireElementResistPercent = fireElementResistPercent;
            m_neutralElementReduction = neutralElementReduction;
            m_earthElementReduction = earthElementReduction;
            m_waterElementReduction = waterElementReduction;
            m_airElementReduction = airElementReduction;
            m_fireElementReduction = fireElementReduction;
            m_criticalDamageFixedResist = criticalDamageFixedResist;
            m_pushDamageFixedResist = pushDamageFixedResist;
            m_pvpNeutralElementResistPercent = pvpNeutralElementResistPercent;
            m_pvpEarthElementResistPercent = pvpEarthElementResistPercent;
            m_pvpWaterElementResistPercent = pvpWaterElementResistPercent;
            m_pvpAirElementResistPercent = pvpAirElementResistPercent;
            m_pvpFireElementResistPercent = pvpFireElementResistPercent;
            m_pvpNeutralElementReduction = pvpNeutralElementReduction;
            m_pvpEarthElementReduction = pvpEarthElementReduction;
            m_pvpWaterElementReduction = pvpWaterElementReduction;
            m_pvpAirElementReduction = pvpAirElementReduction;
            m_pvpFireElementReduction = pvpFireElementReduction;
            m_dodgePALostProbability = dodgePALostProbability;
            m_dodgePMLostProbability = dodgePMLostProbability;
            m_tackleBlock = tackleBlock;
            m_tackleEvade = tackleEvade;
            m_fixedDamageReflection = fixedDamageReflection;
            m_invisibilityState = invisibilityState;
            m_meleeDamageReceivedPercent = meleeDamageReceivedPercent;
            m_rangedDamageReceivedPercent = rangedDamageReceivedPercent;
            m_weaponDamageReceivedPercent = weaponDamageReceivedPercent;
            m_spellDamageReceivedPercent = spellDamageReceivedPercent;
        }
        
        public GameFightMinimalStats()
        {
        }
        
        public override void Serialize(ICustomDataOutput writer)
        {
            writer.WriteVarUhInt(m_lifePoints);
            writer.WriteVarUhInt(m_maxLifePoints);
            writer.WriteVarUhInt(m_baseMaxLifePoints);
            writer.WriteVarUhInt(m_permanentDamagePercent);
            writer.WriteVarUhInt(m_shieldPoints);
            writer.WriteVarShort(m_actionPoints);
            writer.WriteVarShort(m_maxActionPoints);
            writer.WriteVarShort(m_movementPoints);
            writer.WriteVarShort(m_maxMovementPoints);
            writer.WriteDouble(m_summoner);
            writer.WriteBoolean(m_summoned);
            writer.WriteVarShort(m_neutralElementResistPercent);
            writer.WriteVarShort(m_earthElementResistPercent);
            writer.WriteVarShort(m_waterElementResistPercent);
            writer.WriteVarShort(m_airElementResistPercent);
            writer.WriteVarShort(m_fireElementResistPercent);
            writer.WriteVarShort(m_neutralElementReduction);
            writer.WriteVarShort(m_earthElementReduction);
            writer.WriteVarShort(m_waterElementReduction);
            writer.WriteVarShort(m_airElementReduction);
            writer.WriteVarShort(m_fireElementReduction);
            writer.WriteVarShort(m_criticalDamageFixedResist);
            writer.WriteVarShort(m_pushDamageFixedResist);
            writer.WriteVarShort(m_pvpNeutralElementResistPercent);
            writer.WriteVarShort(m_pvpEarthElementResistPercent);
            writer.WriteVarShort(m_pvpWaterElementResistPercent);
            writer.WriteVarShort(m_pvpAirElementResistPercent);
            writer.WriteVarShort(m_pvpFireElementResistPercent);
            writer.WriteVarShort(m_pvpNeutralElementReduction);
            writer.WriteVarShort(m_pvpEarthElementReduction);
            writer.WriteVarShort(m_pvpWaterElementReduction);
            writer.WriteVarShort(m_pvpAirElementReduction);
            writer.WriteVarShort(m_pvpFireElementReduction);
            writer.WriteVarUhShort(m_dodgePALostProbability);
            writer.WriteVarUhShort(m_dodgePMLostProbability);
            writer.WriteVarShort(m_tackleBlock);
            writer.WriteVarShort(m_tackleEvade);
            writer.WriteVarShort(m_fixedDamageReflection);
            writer.WriteByte(m_invisibilityState);
            writer.WriteVarUhShort(m_meleeDamageReceivedPercent);
            writer.WriteVarUhShort(m_rangedDamageReceivedPercent);
            writer.WriteVarUhShort(m_weaponDamageReceivedPercent);
            writer.WriteVarUhShort(m_spellDamageReceivedPercent);
        }
        
        public override void Deserialize(ICustomDataInput reader)
        {
            m_lifePoints = reader.ReadVarUhInt();
            m_maxLifePoints = reader.ReadVarUhInt();
            m_baseMaxLifePoints = reader.ReadVarUhInt();
            m_permanentDamagePercent = reader.ReadVarUhInt();
            m_shieldPoints = reader.ReadVarUhInt();
            m_actionPoints = reader.ReadVarShort();
            m_maxActionPoints = reader.ReadVarShort();
            m_movementPoints = reader.ReadVarShort();
            m_maxMovementPoints = reader.ReadVarShort();
            m_summoner = reader.ReadDouble();
            m_summoned = reader.ReadBoolean();
            m_neutralElementResistPercent = reader.ReadVarShort();
            m_earthElementResistPercent = reader.ReadVarShort();
            m_waterElementResistPercent = reader.ReadVarShort();
            m_airElementResistPercent = reader.ReadVarShort();
            m_fireElementResistPercent = reader.ReadVarShort();
            m_neutralElementReduction = reader.ReadVarShort();
            m_earthElementReduction = reader.ReadVarShort();
            m_waterElementReduction = reader.ReadVarShort();
            m_airElementReduction = reader.ReadVarShort();
            m_fireElementReduction = reader.ReadVarShort();
            m_criticalDamageFixedResist = reader.ReadVarShort();
            m_pushDamageFixedResist = reader.ReadVarShort();
            m_pvpNeutralElementResistPercent = reader.ReadVarShort();
            m_pvpEarthElementResistPercent = reader.ReadVarShort();
            m_pvpWaterElementResistPercent = reader.ReadVarShort();
            m_pvpAirElementResistPercent = reader.ReadVarShort();
            m_pvpFireElementResistPercent = reader.ReadVarShort();
            m_pvpNeutralElementReduction = reader.ReadVarShort();
            m_pvpEarthElementReduction = reader.ReadVarShort();
            m_pvpWaterElementReduction = reader.ReadVarShort();
            m_pvpAirElementReduction = reader.ReadVarShort();
            m_pvpFireElementReduction = reader.ReadVarShort();
            m_dodgePALostProbability = reader.ReadVarUhShort();
            m_dodgePMLostProbability = reader.ReadVarUhShort();
            m_tackleBlock = reader.ReadVarShort();
            m_tackleEvade = reader.ReadVarShort();
            m_fixedDamageReflection = reader.ReadVarShort();
            m_invisibilityState = reader.ReadByte();
            m_meleeDamageReceivedPercent = reader.ReadVarUhShort();
            m_rangedDamageReceivedPercent = reader.ReadVarUhShort();
            m_weaponDamageReceivedPercent = reader.ReadVarUhShort();
            m_spellDamageReceivedPercent = reader.ReadVarUhShort();
        }
    }
}
