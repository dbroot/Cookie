//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cookie.Protocol.Network.Types.Game.Character.Choice
{
    using Cookie.Protocol.Network.Types.Game.Character;
    using System.Collections.Generic;
    using Cookie.Protocol.Network.Messages;
    using Cookie.Protocol.Network.Types;
    using Cookie.IO;
    
    
    public class AbstractCharacterToRefurbishInformation : AbstractCharacterInformation
    {
        
        public new const short ProtocolId = 475;
        
        public override short TypeID
        {
            get
            {
                return ProtocolId;
            }
        }
        
        private List<System.Int32> m_colors;
        
        public virtual List<System.Int32> Colors
        {
            get
            {
                return m_colors;
            }
            set
            {
                m_colors = value;
            }
        }
        
        private uint m_cosmeticId;
        
        public virtual uint CosmeticId
        {
            get
            {
                return m_cosmeticId;
            }
            set
            {
                m_cosmeticId = value;
            }
        }
        
        public AbstractCharacterToRefurbishInformation(List<System.Int32> colors, uint cosmeticId)
        {
            m_colors = colors;
            m_cosmeticId = cosmeticId;
        }
        
        public AbstractCharacterToRefurbishInformation()
        {
        }
        
        public override void Serialize(ICustomDataOutput writer)
        {
            base.Serialize(writer);
            writer.WriteVarUhInt(m_cosmeticId);
            writer.WriteShort(((short)(m_colors.Count)));
            int colorsIndex;
            for (colorsIndex = 0; (colorsIndex < m_colors.Count); colorsIndex = (colorsIndex + 1))
            {
                writer.WriteInt(m_colors[colorsIndex]);
            }          
        }
        
        public override void Deserialize(ICustomDataInput reader)
        {
            base.Deserialize(reader);
            m_cosmeticId = reader.ReadVarUhInt();
            int colorsCount = reader.ReadUShort();
            int colorsIndex;
            m_colors = new System.Collections.Generic.List<int>();
            for (colorsIndex = 0; (colorsIndex < colorsCount); colorsIndex = (colorsIndex + 1))
            {
                m_colors.Add(reader.ReadInt());
            }
        }
    }
}
