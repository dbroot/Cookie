//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cookie.Protocol.Network.Messages.Game.Context.Fight
{
    using System.Collections.Generic;
    using Cookie.Protocol.Network.Messages;
    using Cookie.Protocol.Network.Types;
    using Cookie.IO;
    
    
    public class GameFightJoinMessage : NetworkMessage
    {
        
        public const uint ProtocolId = 702;
        
        public override uint MessageID
        {
            get
            {
                return ProtocolId;
            }
        }
        
        private bool m_isTeamPhase;
        
        public virtual bool IsTeamPhase
        {
            get
            {
                return m_isTeamPhase;
            }
            set
            {
                m_isTeamPhase = value;
            }
        }
        
        private bool m_canBeCancelled;
        
        public virtual bool CanBeCancelled
        {
            get
            {
                return m_canBeCancelled;
            }
            set
            {
                m_canBeCancelled = value;
            }
        }
        
        private bool m_canSayReady;
        
        public virtual bool CanSayReady
        {
            get
            {
                return m_canSayReady;
            }
            set
            {
                m_canSayReady = value;
            }
        }
        
        private bool m_isFightStarted;
        
        public virtual bool IsFightStarted
        {
            get
            {
                return m_isFightStarted;
            }
            set
            {
                m_isFightStarted = value;
            }
        }
        
        private short m_timeMaxBeforeFightStart;
        
        public virtual short TimeMaxBeforeFightStart
        {
            get
            {
                return m_timeMaxBeforeFightStart;
            }
            set
            {
                m_timeMaxBeforeFightStart = value;
            }
        }
        
        private byte m_fightType;
        
        public virtual byte FightType
        {
            get
            {
                return m_fightType;
            }
            set
            {
                m_fightType = value;
            }
        }
        
        public GameFightJoinMessage(bool isTeamPhase, bool canBeCancelled, bool canSayReady, bool isFightStarted, short timeMaxBeforeFightStart, byte fightType)
        {
            m_isTeamPhase = isTeamPhase;
            m_canBeCancelled = canBeCancelled;
            m_canSayReady = canSayReady;
            m_isFightStarted = isFightStarted;
            m_timeMaxBeforeFightStart = timeMaxBeforeFightStart;
            m_fightType = fightType;
        }
        
        public GameFightJoinMessage()
        {
        }
        
        public override void Serialize(ICustomDataOutput writer)
        {
            byte flag = new byte();
            BooleanByteWrapper.SetFlag(0, flag, m_isTeamPhase);
            BooleanByteWrapper.SetFlag(1, flag, m_canBeCancelled);
            BooleanByteWrapper.SetFlag(2, flag, m_canSayReady);
            BooleanByteWrapper.SetFlag(3, flag, m_isFightStarted);
            writer.WriteByte(flag);
            writer.WriteShort(m_timeMaxBeforeFightStart);
            writer.WriteByte(m_fightType);
        }
        
        public override void Deserialize(ICustomDataInput reader)
        {
            byte flag = reader.ReadByte();
            m_isTeamPhase = BooleanByteWrapper.GetFlag(flag, 0);
            m_canBeCancelled = BooleanByteWrapper.GetFlag(flag, 1);
            m_canSayReady = BooleanByteWrapper.GetFlag(flag, 2);
            m_isFightStarted = BooleanByteWrapper.GetFlag(flag, 3);
            m_timeMaxBeforeFightStart = reader.ReadShort();
            m_fightType = reader.ReadByte();
        }
    }
}
