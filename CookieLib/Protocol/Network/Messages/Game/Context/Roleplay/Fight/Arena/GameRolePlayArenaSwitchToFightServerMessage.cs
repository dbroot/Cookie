//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cookie.Protocol.Network.Messages.Game.Context.Roleplay.Fight.Arena
{
    using System.Collections.Generic;
    using Cookie.Protocol.Network.Messages;
    using Cookie.Protocol.Network.Types;
    using Cookie.IO;
    
    
    public class GameRolePlayArenaSwitchToFightServerMessage : NetworkMessage
    {
        
        public const uint ProtocolId = 6575;
        
        public override uint MessageID
        {
            get
            {
                return ProtocolId;
            }
        }
        
        private List<System.Byte> m_ticket;
        
        public virtual List<System.Byte> Ticket
        {
            get
            {
                return m_ticket;
            }
            set
            {
                m_ticket = value;
            }
        }
        
        private string m_address;
        
        public virtual string Address
        {
            get
            {
                return m_address;
            }
            set
            {
                m_address = value;
            }
        }
        
        private ushort m_port;
        
        public virtual ushort Port
        {
            get
            {
                return m_port;
            }
            set
            {
                m_port = value;
            }
        }
        
        public GameRolePlayArenaSwitchToFightServerMessage(List<System.Byte> ticket, string address, ushort port)
        {
            m_ticket = ticket;
            m_address = address;
            m_port = port;
        }
        
        public GameRolePlayArenaSwitchToFightServerMessage()
        {
        }
        
        public override void Serialize(ICustomDataOutput writer)
        {
            writer.WriteShort(((short)(m_ticket.Count)));
            int ticketIndex;
            for (ticketIndex = 0; (ticketIndex < m_ticket.Count); ticketIndex = (ticketIndex + 1))
            {
                writer.WriteByte(m_ticket[ticketIndex]);
            }
            writer.WriteUTF(m_address);
            writer.WriteUShort(m_port);
        }
        
        public override void Deserialize(ICustomDataInput reader)
        {
            int ticketCount = reader.ReadUShort();
            int ticketIndex;
            m_ticket = new System.Collections.Generic.List<byte>();
            for (ticketIndex = 0; (ticketIndex < ticketCount); ticketIndex = (ticketIndex + 1))
            {
                m_ticket.Add(reader.ReadByte());
            }
            m_address = reader.ReadUTF();
            m_port = reader.ReadUShort();
        }
    }
}
